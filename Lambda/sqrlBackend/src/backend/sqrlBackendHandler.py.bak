import osimport datetimeimport timeimport base64import boto3import pyqrcodefrom model import Challengefrom backendBaseHandler import backendBaseHandlerclass sqrlBackendHandler(backendBaseHandler):    """    sqrlBackendHandler API v1.    sqrlBackendHandler inherits from the backendBaseHandler abstract class.    inheriting methods needs to be overridden.    """    s3_client = boto3.client('s3')    bucket = 'sqrlcontainer'    key = 'challenges/'    def __init__(self):        super(self.__class__, self).__init__()    def on_generate(self, request_body, request_params):        """        :param request_body:        :param request_params:        """        pass    def on_processing_error(self, event, context, err):        """        :param event:        :param context:        :param err:        """        return self.build_response('404', None, None, None, err)    def process_request(self, event, context):        """        :param event:        :param context:        :return:        """        try:            # response = None            if event['body']['operation'] == "generate":                file_name, qrcode_path = self.generate_challenge()                db_id = self.dynamodb(file_name, qrcode_path)                response_type = 'generate'        except Exception as err:            response = self.on_processing_error(event, context, err)        else:            self.logger.info("Successfully Created Response")            response = self.build_response('200', qrcode_path, response_type, db_id, None)        return response    # -------- Helpers to build the response type for a request ----------    def build_response(self, status_code, qr_path, response_type, db_id, err_msg=None):        """        :param status_code:        :param db_id:        :param qr_path:        :type err_msg:        :param response_type: success, fail, error        :return:        """        return {            "result": {                    "status_code": status_code,                    "response_type": response_type,                    "qrcode_path": qr_path,                    "database_entry": db_id,                    "error_message": err_msg                    }            }    # Helper functions to generate, record, and save the QRcodes    def generate_challenge(self):        """        """        self.logger.info("Beginning to generate QR code")        # QR Code data        qr_data = base64.urlsafe_b64encode(os.urandom(6))        self.logger.info('QR Data: ' + qr_data)        # Create a qr code image        img = pyqrcode.create(qr_data)        # Save the img in a temporary location        temp_folder = '/tmp/'        file_name = qr_data + '.svg'        img.svg(temp_folder + file_name, scale=6)        temp_path = temp_folder + file_name        target_path = self.key + file_name        try:            self.s3_client.upload_file(temp_path, self.bucket, target_path)            params = {'Bucket': self.bucket, 'Key': target_path}            return file_name, self.s3_client.generate_presigned_url('get_object', Params=params)        except Exception as err:            self.logger.info("Error uploading qrcode: %s" % err)            return err    def dynamodb(self, qr_code, s3_file_path):        """        :param qr_code:        :param s3_file_path:        """        now = datetime.datetime.now()        expiry = now + datetime.timedelta(minutes=10)        #        try:            code = Challenge(qr_code,                             readable_date_created=now.strftime("%Y-%m-%d %U:%M:%S"),                             date_created=int(round(time.time() * 1000)),                             readable_expiry=expiry.strftime("%Y-%m-%d %U:%M:%S"),                             expiry=int(round((time.time() + 600) * 1000)),                             s3_file_path=s3_file_path.encode('utf-8'),                             is_expired=0)            code.save()        except Exception as err:            self.logger.info("Error creating a database entry: %s" % err)        else:            self.logger.info("Successfully created a database entry")            return code.qrcode